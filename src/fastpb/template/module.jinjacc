#include <Python.h>
#include <string>
#include "structmember.h"
#include "{{ fileName }}.pb.h"

{% macro cpp_type_name(field) -%}
    {{ '_'.join(field.type_name.replace('.' + moduleName + '.', '').split('.')) }}
{%- endmacro %}

static PyObject *
fastpb_convert{{ TYPE.INT32 }}(::google::protobuf::int32 value)
{
    return PyLong_FromLong(value);
}

static PyObject *
fastpb_convert{{ TYPE.INT64 }}(::google::protobuf::int64 value)
{
    return PyLong_FromLongLong(value);
}

static PyObject *
fastpb_convert{{ TYPE.SINT64 }}(::google::protobuf::int64 value)
{
    return PyLong_FromLongLong(value);
}

static PyObject *
fastpb_convert{{ TYPE.SINT32 }}(::google::protobuf::int32 value)
{
    return PyLong_FromLong(value);
}

static PyObject *
fastpb_convert{{ TYPE.UINT32 }}(::google::protobuf::uint32 value)
{
    return PyLong_FromUnsignedLong(value);
}

static PyObject *
fastpb_convert{{ TYPE.UINT64 }}(::google::protobuf::uint64 value)
{
    return PyLong_FromUnsignedLong(value);
}

static PyObject *
fastpb_convert{{ TYPE.DOUBLE }}(double value)
{
    return PyFloat_FromDouble(value);
}

static PyObject *
fastpb_convert{{ TYPE.FLOAT }}(float value)
{
   return PyFloat_FromDouble(value);
}

static PyObject *
fastpb_convert{{ TYPE.STRING }}(const ::std::string &value)
{
    return PyUnicode_Decode(value.data(), value.length(), "utf-8", NULL);
}

static PyObject *
fastpb_convert{{ TYPE.BYTES }}(const ::std::string &value)
{
    return PyString_FromStringAndSize(value.data(), value.length());
}

static PyObject *
fastpb_convert{{ TYPE.BOOL }}(bool value)
{
    return PyBool_FromLong(value ? 1 : 0);
}

static PyObject *
fastpb_convert{{ TYPE.ENUM }}(int value)
{
    // TODO(robbyw): Check EnumName_IsValid(value)
    return PyLong_FromLong(value);
}

{% for enum in enums %}
  typedef struct {
      PyObject_HEAD
  } enum_{{ enum.name }};

  static PyTypeObject enum_{{ enum.name }}Type = {
      PyObject_HEAD_INIT(NULL)
      0,                                      /*ob_size*/
      "{{ moduleName }}.{{ enum.name }}",     /*tp_name*/
      sizeof(enum_{{ enum.name }}),           /*tp_basicsize*/
      0,                                      /*tp_itemsize*/
      0,                                      /*tp_dealloc*/
      0,                                      /*tp_print*/
      0,                                      /*tp_getattr*/
      0,                                      /*tp_setattr*/
      0,                                      /*tp_compare*/
      0,                                      /*tp_repr*/
      0,                                      /*tp_as_number*/
      0,                                      /*tp_as_sequence*/
      0,                                      /*tp_as_mapping*/
      0,                                      /*tp_hash */
      0,                                      /*tp_call*/
      0,                                      /*tp_str*/
      0,                                      /*tp_getattro*/
      0,                                      /*tp_setattro*/
      0,                                      /*tp_as_buffer*/
      Py_TPFLAGS_DEFAULT,                     /*tp_flags*/
      "{{ enum.name }} enumeration",          /* tp_doc */
  };
{% endfor %}

{% for message in messages %}
  typedef struct {
      PyObject_HEAD

      {{ package }}::{{ message.name }} *protobuf;
  } {{ message.name }};

  static void
  {{ message.name }}_dealloc({{ message.name }}* self)
  {
      self->ob_type->tp_free((PyObject*)self);

      delete self->protobuf;
  }

  static PyObject *
  {{ message.name }}_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
  {
      {{ message.name }} *self;

      self = ({{ message.name }} *)type->tp_alloc(type, 0);

      self->protobuf = new {{ package }}::{{ message.name }}();

      return (PyObject *)self;
  }

  static PyObject *
  {{ message.name }}_SerializeToString({{ message.name }}* self)
  {
      std::string result;
      Py_BEGIN_ALLOW_THREADS
      self->protobuf->SerializeToString(&result);
      Py_END_ALLOW_THREADS
      return PyString_FromStringAndSize(result.data(), result.length());
  }


  static PyObject *
  {{ message.name }}_ParseFromString({{ message.name }}* self, PyObject *value)
  {
      std::string serialized(PyString_AsString(value), PyString_Size(value));
      Py_BEGIN_ALLOW_THREADS
      self->protobuf->ParseFromString(serialized);
      Py_END_ALLOW_THREADS
      Py_RETURN_NONE;
  }


  {% for member in message.field %}
    {% if member.type == TYPE.MESSAGE %}
      static PyObject *
      fastpb_convert{{ message.name + member.name }}(const ::google::protobuf::Message &value)
      {
          {{ cpp_type_name(member) }} *obj = ({{ cpp_type_name(member) }} *)
              {{ cpp_type_name(member) }}_new(&{{ cpp_type_name(member) }}Type, NULL, NULL);
          obj->protobuf->MergeFrom(value);
          return (PyObject *)obj;
      }
    {% endif %}

    static PyObject *
    {{ message.name }}_get{{ member.name }}({{ message.name }} *self, void *closure)
    {
        {% if member.label == LABEL.REPEATED %}
          int len = self->protobuf->{{ member.name.lower() }}_size();
          PyObject *tuple = PyTuple_New(len);
          for (int i = 0; i < len; ++i) {
            PyObject *value =
                fastpb_convert{{ member.type if member.type != TYPE.MESSAGE else message.name + member.name }}(
                    self->protobuf->{{ member.name.lower() }}(i));
            PyTuple_SetItem(tuple, i, value);
          }
          return tuple;

        {% else %}
          if (! self->protobuf->has_{{ member.name.lower() }}()) {
            Py_RETURN_NONE;
          }

          return
              fastpb_convert{{ member.type if member.type != TYPE.MESSAGE else message.name + member.name }}(
                  self->protobuf->{{ member.name.lower() }}());

        {% endif %}
    }

    static int
    {{ message.name }}_set{{ member.name }}({{ message.name }} *self, PyObject *input, void *closure)
    {
      if (input == NULL || input == Py_None) {
        self->protobuf->clear_{{ member.name.lower() }}();
        return 0;
      }

      {% if member.label == LABEL.REPEATED %}
        if (PyString_Check(input)) {
          PyErr_SetString(PyExc_TypeError, "The {{ member.name }} attribute value must be a sequence");
          return -1;
        }
        PyObject *sequence = PySequence_Fast(input, "The {{ member.name }} attribute value must be a sequence");
        self->protobuf->clear_{{ member.name.lower() }}();
        for (Py_ssize_t i = 0, len = PySequence_Length(sequence); i < len; ++i) {
          PyObject *value = PySequence_Fast_GET_ITEM(sequence, i);

      {% else %}
        PyObject *value = input;
      {% endif %}

      {% if member.type == TYPE.STRING %}
        // string
        bool reallocated = false;
        if (PyUnicode_Check(value)) {
          value = PyUnicode_AsEncodedString(value, "utf-8", NULL);
          reallocated = true;
        }

        if (! PyString_Check(value)) {
          PyErr_SetString(PyExc_TypeError, "The {{ member.name }} attribute value must be a string");
          return -1;
        }

        std::string protoValue(PyString_AsString(value), PyString_Size(value));
        if (reallocated) {
          Py_XDECREF(value);
        }

      {% elif member.type == TYPE.BYTES %}
        // string
        if (! PyString_Check(value)) {
          PyErr_SetString(PyExc_TypeError, "The {{ member.name }} attribute value must be a string");
          return -1;
        }

        std::string protoValue(PyString_AsString(value), PyString_Size(value));

      {% elif member.type == TYPE.DOUBLE or member.type == TYPE.FLOAT %}
        {% if member.type == TYPE.DOUBLE %}
        double protoValue;
        {% elif member.type == TYPE.FLOAT %}
        float protoValue;
        {% endif %}
        if (PyFloat_Check(value)) {
          protoValue = PyFloat_AsDouble(value);
        } else if (PyInt_Check(value)) {
          protoValue = PyInt_AsLong(value);
        } else if (PyLong_Check(value)) {
          protoValue = PyLong_AsLongLong(value);
        } else {
          PyErr_SetString(PyExc_TypeError,
                        {% if member.type == TYPE.DOUBLE %}
                          "The {{ member.name }} attribute value must be a double");
                        {% elif member.type == TYPE.FLOAT %}
                          "The {{ member.name }} attribute value must be a float");
                        {% endif %}
          return -1;
        }

      {% elif member.type == TYPE.INT64 or member.type == TYPE.SINT64 %}
        ::google::protobuf::int64 protoValue;

        // int64
        if (PyInt_Check(value)) {
          protoValue = PyInt_AsLong(value);
        } else if (PyLong_Check(value)) {
          protoValue = PyLong_AsLongLong(value);
        } else {
          PyErr_SetString(PyExc_TypeError,
                          "The {{ member.name }} attribute value must be an integer");
          return -1;
        }

      {% elif member.type == TYPE.INT32 or member.type == TYPE.SINT32 %}
        ::google::protobuf::int32 protoValue;

        // int32
        if (PyInt_Check(value)) {
          protoValue = PyInt_AsLong(value);
        } else {
          PyErr_SetString(PyExc_TypeError,
                          "The {{ member.name }} attribute value must be an integer");
          return -1;
        }

      {% elif member.type == TYPE.ENUM %}
        // {{ member.type_name }}
        {{ member.type_name.replace('.', '::') }} protoValue;

        // int32
        if (PyInt_Check(value)) {
          protoValue = ({{ member.type_name.replace('.', '::') }}) PyInt_AsLong(value);
        } else {
          PyErr_SetString(PyExc_TypeError,
                          "The {{ member.name }} attribute value must be an integer");
          return -1;
        }

      {% elif member.type == TYPE.BOOL %}
        bool protoValue;

        if (PyBool_Check(value)) {
          protoValue = (value == Py_True);
        } else {
          PyErr_SetString(PyExc_TypeError,
                          "The {{ member.name }} attribute value must be a boolean");
          return -1;
        }

      {% elif member.type == TYPE.UINT32  or member.type == TYPE.UINT64 %}
        {% if member.type == TYPE.UINT32 %}
          ::google::protobuf::uint32 protoValue;
        {% elif member.type == TYPE.UINT64 %}
          ::google::protobuf::uint64 protoValue;
        {% endif %}

        // uint32
        if (PyInt_Check(value)) {
          protoValue = PyInt_AsUnsignedLongMask(value);
        } else if (PyLong_Check(value)) {
          protoValue = PyLong_AsUnsignedLong(value);
        } else {
          PyErr_SetString(PyExc_TypeError,
                          "The {{ member.name }} attribute value must be an integer");
          return -1;
        }

      {% elif member.type == TYPE.MESSAGE %}

        if (!PyType_IsSubtype(value->ob_type, &{{ cpp_type_name(member) }}Type)) {
          PyErr_SetString(PyExc_TypeError,
                          "The {{ member.name }} attribute value must be an instance of {{ cpp_type_name(member) }}");
          return -1;
        }

         // {{ member.type_name }}
        {{ member.type_name.replace('.', '::') }} *protoValue =
            (({{ cpp_type_name(member) }} *) value)->protobuf;

      {% endif %}

      {% if member.label == LABEL.REPEATED %}
          {% if member.type == TYPE.MESSAGE %}
            self->protobuf->add_{{ member.name.lower() }}()->MergeFrom(*protoValue);
          {% else %}
            self->protobuf->add_{{ member.name.lower() }}(protoValue);
          {% endif %}
        }

        Py_XDECREF(sequence);
      {% else %}
        {% if member.type == TYPE.MESSAGE %}
          self->protobuf->mutable_{{ member.name.lower() }}()->MergeFrom(*protoValue);
        {% else %}
          self->protobuf->set_{{ member.name.lower() }}(protoValue);
        {% endif %}
      {% endif %}

      return 0;
    }
  {% endfor %}

  static int
  {{ message.name }}_init({{ message.name }} *self, PyObject *args, PyObject *kwds)
  {
      {% if message.field %}
        {% for member in message.field %}
          PyObject *{{ member.name }} = NULL;
        {% endfor %}

        static char *kwlist[] = {
          {% for member in message.field %}
            (char *) "{{ member.name }}",
          {% endfor %}
          NULL
        };

        if (! PyArg_ParseTupleAndKeywords(
            args, kwds, "|{{ 'O' * message.field|length }}", kwlist,
            {% for member in message.field -%}
              &{{ member.name }}
              {%- if not loop.last -%}
                ,
              {%- endif -%}
            {%- endfor %}))
          return -1;

        {% for member in message.field %}
          if ({{ member.name }}) {
            if ({{ message.name }}_set{{ member.name }}(self, {{ member.name }}, NULL) < 0) {
              return -1;
            }
          }
        {% endfor %}
      {% endif %}

      return 0;
  }

  static PyMemberDef {{ message.name }}_members[] = {
      {NULL}  // Sentinel
  };


  static PyGetSetDef {{ message.name }}_getsetters[] = {
    {% for member in message.field %}
      {(char *)"{{ member.name }}",
       (getter){{ message.name }}_get{{ member.name }}, (setter){{ message.name }}_set{{ member.name }},
       (char *)"",
       NULL},
    {% endfor %}
      {NULL}  // Sentinel
  };


  static PyMethodDef {{ message.name }}_methods[] = {
      {"SerializeToString", (PyCFunction){{ message.name }}_SerializeToString, METH_NOARGS,
       "Serializes the protocol buffer to a string."
      },
      {"ParseFromString", (PyCFunction){{ message.name }}_ParseFromString, METH_O,
       "Parses the protocol buffer from a string."
      },
      {NULL}  // Sentinel
  };


  static PyTypeObject {{ message.name }}Type = {
      PyObject_HEAD_INIT(NULL)
      0,                                      /*ob_size*/
      "{{ moduleName }}.{{ message.name }}",  /*tp_name*/
      sizeof({{ message.name }}),             /*tp_basicsize*/
      0,                                      /*tp_itemsize*/
      (destructor){{ message.name }}_dealloc, /*tp_dealloc*/
      0,                                      /*tp_print*/
      0,                                      /*tp_getattr*/
      0,                                      /*tp_setattr*/
      0,                                      /*tp_compare*/
      0,                                      /*tp_repr*/
      0,                                      /*tp_as_number*/
      0,                                      /*tp_as_sequence*/
      0,                                      /*tp_as_mapping*/
      0,                                      /*tp_hash */
      0,                                      /*tp_call*/
      0,                                      /*tp_str*/
      0,                                      /*tp_getattro*/
      0,                                      /*tp_setattro*/
      0,                                      /*tp_as_buffer*/
      Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, /*tp_flags*/
      "{{ message.name }} objects",           /* tp_doc */
      0,                                      /* tp_traverse */
      0,                                      /* tp_clear */
      0,                   	 	                /* tp_richcompare */
      0,	   	                                /* tp_weaklistoffset */
      0,                   		                /* tp_iter */
      0,		                                  /* tp_iternext */
      {{ message.name }}_methods,             /* tp_methods */
      {{ message.name }}_members,             /* tp_members */
      {{ message.name }}_getsetters,          /* tp_getset */
      0,                                      /* tp_base */
      0,                                      /* tp_dict */
      0,                                      /* tp_descr_get */
      0,                                      /* tp_descr_set */
      0,                                      /* tp_dictoffset */
      (initproc){{ message.name }}_init,      /* tp_init */
      0,                                      /* tp_alloc */
      {{ message.name }}_new,                 /* tp_new */
  };

{% endfor %}

static PyMethodDef module_methods[] = {
    {NULL}  // Sentinel
};

#ifndef PyMODINIT_FUNC	// Declarations for DLL import/export.
#define PyMODINIT_FUNC void
#endif
PyMODINIT_FUNC
init{{ packageName }}(void)
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    PyObject* m;

    {% if enums %}
      PyObject *classDict;
    {% endif %}

    {% for message in messages %}
      if (PyType_Ready(&{{ message.name }}Type) < 0)
          return;
    {% endfor %}

    m = Py_InitModule3("{{ packageName }}", module_methods,
                       "{{ moduleDescription }}");

    if (m == NULL)
      return;

    {% for enum in enums %}
      classDict = PyDict_New();
      {% for value in enum.value %}
        PyDict_SetItemString(classDict, "{{ value.name }}", PyInt_FromLong({{ value.number }}));
      {% endfor %}

      enum_{{ enum.name }}Type.tp_dict = classDict;
      enum_{{ enum.name }}Type.tp_new = PyType_GenericNew;
      if (PyType_Ready(&enum_{{ enum.name }}Type) < 0)
        return;

      Py_INCREF(&enum_{{ enum.name }}Type);
      PyModule_AddObject(m, "{{ enum.name }}", (PyObject *)&enum_{{ enum.name }}Type);
    {% endfor %}

    {% for message in messages %}
      Py_INCREF(&{{ message.name }}Type);
      PyModule_AddObject(m, "{{ message.name }}", (PyObject *)&{{ message.name }}Type);
    {% endfor %}
}
